/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
 */
class Game {
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É
     * @param {HTMLCanvasElement} canvas - –≠–ª–µ–º–µ–Ω—Ç –∫–∞–Ω–≤–∞—Å–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–≥—Ä—ã
     */
    constructor(canvas) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.bubbles = [];
        this.score = 0;
        this.level = 1;
        this.lives = 3;
        this.isGameOver = false;
        this.isPaused = false;
        this.isSlowTime = false;
        this.isDoublePoints = false;
        this.isImmortal = false;
        this.bubbleSpawnRate = 1000; // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –ø—É–∑—ã—Ä–µ–π
        this.bubbleSpawnTimer = 0;
        this.comboCount = 0;
        this.comboTimer = 0;
        this.maxComboTime = 1000; // –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–æ–º–±–æ
        this.levelProgress = 0;
        this.levelTarget = 500; // –û—á–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        this.lastFrameTime = 0;
        this.timeScale = 1; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä—ã (–¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è)
        this.pointsMultiplier = 1; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—á–∫–æ–≤
        this.effectTimers = {
            slowTime: null,
            doublePoints: null
        };
        
        // –ü–∞—Å—Ö–∞–ª–∫–∏ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã
        this.secretCodes = {
            'bubble': false,  // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–¥—É–∂–Ω—ã–µ –ø—É–∑—ã—Ä–∏
            'pop': false,     // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–∑—Ä—ã–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            'combo': false,   // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—É–ø–µ—Ä-–∫–æ–º–±–æ
            'godmode': false, // –ë–µ—Å—Å–º–µ—Ä—Ç–∏–µ + –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –æ—á–∫–∏
            'money': false,   // –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—á–∫–∏ –≤ 10 —Ä–∞–∑
            'speed': false,   // –ó–∞–º–µ–¥–ª—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞–≤—Å–µ–≥–¥–∞
            'life': false,    // –î–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∂–∏–∑–Ω–∏
            'master': false   // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–¥—ã —Å—Ä–∞–∑—É
        };
        this.easterEggs = {
            'rainbowMode': false,    // –†–∞–¥—É–∂–Ω—ã–π —Ä–µ–∂–∏–º
            'giantBubbles': false,   // –ì–∏–≥–∞–Ω—Ç—Å–∫–∏–µ –ø—É–∑—ã—Ä–∏
            'antiGravity': false,    // –ê–Ω—Ç–∏–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
            'superCombo': false,     // –°—É–ø–µ—Ä-–∫–æ–º–±–æ
            'godMode': false,        // –†–µ–∂–∏–º –±–æ–≥–∞
            'infiniteScore': false,  // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –æ—á–∫–∏
            'timeWarp': false,       // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            'immortal': false,       // –ë–µ—Å—Å–º–µ—Ä—Ç–∏–µ
            'allCheats': false       // –í—Å–µ —á–∏—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
        };
        this.achievements = [];      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        this.secretCodeInput = '';   // –í–≤–æ–¥ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
        this.secretCodeTimer = 0;    // –¢–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        
        // –ê—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä
        this.audio = new AudioManager();
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.stats = {
            totalGames: 0,
            bestScore: 0,
            totalBubbles: 0,
            maxLevel: 1,
            secretsFound: 0,         // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
            highestCombo: 0          // –ù–∞–∏–≤—ã—Å—à–µ–µ –∫–æ–º–±–æ
        };
        
        this.loadStats();
        this.loadSecrets();
        this.setupEventListeners();
        this.resizeCanvas();
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ localStorage
     */
    loadStats() {
        const savedStats = localStorage.getItem('bubblePopStats');
        if (savedStats) {
            this.stats = JSON.parse(savedStats);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ localStorage
     */
    saveStats() {
        localStorage.setItem('bubblePopStats', JSON.stringify(this.stats));
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã –∏ –ø–∞—Å—Ö–∞–ª–∫–∏ –∏–∑ localStorage
     */
    loadSecrets() {
        const savedSecrets = localStorage.getItem('bubblePopSecrets');
        if (savedSecrets) {
            const secrets = JSON.parse(savedSecrets);
            this.secretCodes = secrets.codes || this.secretCodes;
            this.easterEggs = secrets.eggs || this.easterEggs;
            this.achievements = secrets.achievements || this.achievements;
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã –∏ –ø–∞—Å—Ö–∞–ª–∫–∏ –≤ localStorage
     */
    saveSecrets() {
        const secrets = {
            codes: this.secretCodes,
            eggs: this.easterEggs,
            achievements: this.achievements
        };
        localStorage.setItem('bubblePopSecrets', JSON.stringify(secrets));
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    checkAchievements() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –æ—á–∫–∞–º
        if (this.score >= 1000 && !this.hasAchievement('score1000')) {
            this.unlockAchievement('score1000', '–ù–∞–±—Ä–∞—Ç—å 1000 –æ—á–∫–æ–≤', '–í—ã –Ω–∞–±—Ä–∞–ª–∏ 1000 –æ—á–∫–æ–≤!');
        }
        
        if (this.score >= 5000 && !this.hasAchievement('score5000')) {
            this.unlockAchievement('score5000', '–ù–∞–±—Ä–∞—Ç—å 5000 –æ—á–∫–æ–≤', '–í—ã –Ω–∞–±—Ä–∞–ª–∏ 5000 –æ—á–∫–æ–≤!');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–º–±–æ
        if (this.comboCount >= 5 && !this.hasAchievement('combo5')) {
            this.unlockAchievement('combo5', '–ö–æ–º–±–æ x5', '–í—ã —Å–¥–µ–ª–∞–ª–∏ –∫–æ–º–±–æ –∏–∑ 5 –ø—É–∑—ã—Ä–µ–π!');
        }
        
        if (this.comboCount >= 10 && !this.hasAchievement('combo10')) {
            this.unlockAchievement('combo10', '–ö–æ–º–±–æ x10', '–í—ã —Å–¥–µ–ª–∞–ª–∏ –∫–æ–º–±–æ –∏–∑ 10 –ø—É–∑—ã—Ä–µ–π!');
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ combo
            this.secretCodes.combo = true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—é
        if (this.level >= 5 && !this.hasAchievement('level5')) {
            this.unlockAchievement('level5', '–£—Ä–æ–≤–µ–Ω—å 5', '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 5 —É—Ä–æ–≤–Ω—è!');
        }
        
        if (this.level >= 10 && !this.hasAchievement('level10')) {
            this.unlockAchievement('level10', '–£—Ä–æ–≤–µ–Ω—å 10', '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 10 —É—Ä–æ–≤–Ω—è!');
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ bubble
            this.secretCodes.bubble = true;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (this.comboCount > this.stats.highestCombo) {
            this.stats.highestCombo = this.comboCount;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.saveSecrets();
        this.saveStats();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
     * @param {string} id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     * @returns {boolean} - true, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
     */
    hasAchievement(id) {
        return this.achievements.some(a => a.id === id);
    }
    
    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
     * @param {string} id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    unlockAchievement(id, title, description) {
        if (!this.hasAchievement(id)) {
            this.achievements.push({
                id,
                title,
                description,
                unlocked: Date.now()
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
            this.showAchievementNotification(title);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.stats.secretsFound++;
            this.saveStats();
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    showAchievementNotification(title) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = 'achievement-notification';
        notification.innerHTML = `
            <div class="achievement-icon">üèÜ</div>
            <div class="achievement-text">
                <div class="achievement-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</div>
                <div class="achievement-name">${title}</div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const style = document.createElement('style');
        style.textContent = `
            .achievement-notification {
                position: fixed;
                top: 20px;
                right: 20px;
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 15px;
                border-radius: 10px;
                display: flex;
                align-items: center;
                z-index: 1000;
                animation: achievement-slide-in 0.5s, achievement-fade-out 0.5s 4.5s;
                box-shadow: 0 0 20px rgba(255, 215, 0, 0.5);
                border: 2px solid gold;
            }
            .achievement-icon {
                font-size: 30px;
                margin-right: 15px;
            }
            .achievement-title {
                font-size: 14px;
                opacity: 0.8;
            }
            .achievement-name {
                font-size: 18px;
                font-weight: bold;
                color: gold;
            }
            @keyframes achievement-slide-in {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes achievement-fade-out {
                from { opacity: 1; }
                to { opacity: 0; }
            }
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.head.appendChild(style);
        document.body.appendChild(notification);
        
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => this.resizeCanvas());
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞–Ω–≤–∞—Å
        this.canvas.addEventListener('click', (e) => this.handleClick(e));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –±–æ–ª–µ–µ –æ—Ç–∑—ã–≤—á–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.canvas.addEventListener('mousemove', (e) => this.handleMouseMove(e));
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            const touch = e.touches[0];
            const clickEvent = {
                clientX: touch.clientX,
                clientY: touch.clientY
            };
            this.handleClick(clickEvent);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –ø–∞–ª—å—Ü–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            const touch = e.touches[0];
            const moveEvent = {
                clientX: touch.clientX,
                clientY: touch.clientY
            };
            this.handleMouseMove(moveEvent);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤
        document.addEventListener('keydown', (e) => this.handleKeyDown(e));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à
     * @param {KeyboardEvent} e - –°–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
     */
    handleKeyDown(e) {
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ –∏–ª–∏ –æ–∫–æ–Ω—á–µ–Ω–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥
        if (this.isPaused || this.isGameOver) return;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        clearTimeout(this.secretCodeTimer);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞
        if (e.key.length === 1) {
            this.secretCodeInput += e.key.toLowerCase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω –ª–∏ –æ–¥–∏–Ω –∏–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤
            this.checkSecretCode();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            this.secretCodeTimer = setTimeout(() => {
                this.secretCodeInput = '';
            }, 2000);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
        switch (e.key) {
            case 'Escape':
                // –ü–∞—É–∑–∞ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
                if (!this.isGameOver) {
                    this.togglePause();
                }
                break;
                
            case ' ':
                // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ –ø—Ä–æ–±–µ–ª—É, –µ—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                if (this.secretCodes.combo && !this.easterEggs.superCombo) {
                    this.activateEasterEgg('superCombo');
                }
                break;
                
            case 'r':
                // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞–¥—É–∂–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                if (this.secretCodes.bubble && !this.easterEggs.rainbowMode) {
                    this.activateEasterEgg('rainbowMode');
                }
                break;
                
            case 'g':
                // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≥–∏–≥–∞–Ω—Ç—Å–∫–∏—Ö –ø—É–∑—ã—Ä–µ–π, –µ—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                if (this.secretCodes.bubble && !this.easterEggs.giantBubbles) {
                    this.activateEasterEgg('giantBubbles');
                }
                break;
                
            case 'a':
                // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–Ω—Ç–∏–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                if (this.secretCodes.pop && !this.easterEggs.antiGravity) {
                    this.activateEasterEgg('antiGravity');
                }
                break;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–≤–µ–¥–µ–Ω –ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
     */
    checkSecretCode() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ "bubble"
        if (this.secretCodeInput.endsWith('bubble')) {
            this.secretCodes.bubble = true;
            this.showSecretCodeNotification('–ö–æ–¥ "bubble" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
            this.secretCodeInput = '';
            this.saveSecrets();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ "pop"
        else if (this.secretCodeInput.endsWith('pop')) {
            this.secretCodes.pop = true;
            this.showSecretCodeNotification('–ö–æ–¥ "pop" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
            this.secretCodeInput = '';
            this.saveSecrets();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ "combo"
        else if (this.secretCodeInput.endsWith('combo')) {
            this.secretCodes.combo = true;
            this.showSecretCodeNotification('–ö–æ–¥ "combo" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
            this.secretCodeInput = '';
            this.saveSecrets();
        }
        
        // üî• –°–£–ü–ï–† –ß–ò–¢-–ö–û–î "godmode" - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        else if (this.secretCodeInput.endsWith('godmode')) {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã
            this.secretCodes.bubble = true;
            this.secretCodes.pop = true;
            this.secretCodes.combo = true;
            this.secretCodes.godmode = true;
            this.secretCodes.money = true;
            this.secretCodes.speed = true;
            this.secretCodes.life = true;
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Å—Ö–∞–ª–∫–∏
            this.easterEggs.rainbowMode = true;
            this.easterEggs.giantBubbles = true;
            this.easterEggs.antiGravity = false; // –û—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ –∏–≥—Ä–∞—Ç—å
            this.easterEggs.superCombo = true;
            this.easterEggs.godMode = true;
            this.easterEggs.infiniteScore = true;
            this.easterEggs.timeWarp = true;
            this.easterEggs.immortal = true;
            
            // –î–∞–µ–º –∏–≥—Ä–æ–∫—É –ú–ï–ì–ê –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
            this.lives = 999;
            this.pointsMultiplier = 10;
            this.comboCount = 20;
            this.comboTimer = this.maxComboTime * 10;
            this.score += 50000; // –ë–æ–Ω—É—Å –æ—á–∫–æ–≤
            this.timeScale = 0.3; // –ó–∞–º–µ–¥–ª—è–µ–º –≤—Ä–µ–º—è
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showSecretCodeNotification('üî• –ß–ò–¢-–ö–û–î "GODMODE" –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! üî•\nüëë –í–´ –°–¢–ê–õ–ò –ë–û–ì–û–ú –ò–ì–†–´! üëë');
            this.secretCodeInput = '';
            this.saveSecrets();
        }
        
        // üí∞ –ß–ò–¢-–ö–û–î "money" - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—á–∫–∏ –≤ 10 —Ä–∞–∑
        else if (this.secretCodeInput.endsWith('money')) {
            this.secretCodes.money = true;
            this.easterEggs.infiniteScore = true;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—á–∫–∏ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å
            this.score += 10000;
            this.pointsMultiplier = Math.max(this.pointsMultiplier, 5);
            
            this.showSecretCodeNotification('üí∞ –ß–ò–¢-–ö–û–î "MONEY" –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! üí∞\n–û—á–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω—ã –≤ 5 —Ä–∞–∑!');
            this.secretCodeInput = '';
            this.saveSecrets();
        }
        
        // ‚ö° –ß–ò–¢-–ö–û–î "speed" - –∑–∞–º–µ–¥–ª—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞–≤—Å–µ–≥–¥–∞
        else if (this.secretCodeInput.endsWith('speed')) {
            this.secretCodes.speed = true;
            this.easterEggs.timeWarp = true;
            
            // –ó–∞–º–µ–¥–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–≤—Å–µ–≥–¥–∞
            this.timeScale = 0.5;
            this.isSlowTime = true;
            
            this.showSecretCodeNotification('‚ö° –ß–ò–¢-–ö–û–î "SPEED" –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! ‚ö°\n–í—Ä–µ–º—è –∑–∞–º–µ–¥–ª–µ–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞!');
            this.secretCodeInput = '';
            this.saveSecrets();
        }
        
        // ‚ù§Ô∏è –ß–ò–¢-–ö–û–î "life" - –¥–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∂–∏–∑–Ω–∏
        else if (this.secretCodeInput.endsWith('life')) {
            this.secretCodes.life = true;
            this.easterEggs.immortal = true;
            
            // –î–∞–µ–º –º–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–π
            this.lives = 99;
            
            this.showSecretCodeNotification('‚ù§Ô∏è –ß–ò–¢-–ö–û–î "LIFE" –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! ‚ù§Ô∏è\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å 99 –∂–∏–∑–Ω–µ–π!');
            this.secretCodeInput = '';
            this.saveSecrets();
        }
        
        // üëë –ú–ê–°–¢–ï–† –ß–ò–¢-–ö–û–î "master" - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –í–°–ï –∫–æ–¥—ã —Å—Ä–∞–∑—É
        else if (this.secretCodeInput.endsWith('master')) {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –í–°–ï —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã
            Object.keys(this.secretCodes).forEach(code => {
                this.secretCodes[code] = true;
            });
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –í–°–ï –ø–∞—Å—Ö–∞–ª–∫–∏
            Object.keys(this.easterEggs).forEach(egg => {
                if (egg !== 'antiGravity') { // –ö—Ä–æ–º–µ –∞–Ω—Ç–∏–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
                    this.easterEggs[egg] = true;
                }
            });
            
            // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
            this.lives = 999;
            this.pointsMultiplier = 20;
            this.comboCount = 50;
            this.comboTimer = this.maxComboTime * 20;
            this.score += 100000; // –û–≥—Ä–æ–º–Ω—ã–π –±–æ–Ω—É—Å –æ—á–∫–æ–≤
            this.timeScale = 0.2; // –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            this.level += 5; // –ë–æ–Ω—É—Å —É—Ä–æ–≤–Ω–µ–π
            
            this.showSecretCodeNotification('üëë –ú–ê–°–¢–ï–† –ß–ò–¢-–ö–û–î "MASTER" –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! üëë\nüéÆ –í–´ –ü–û–õ–£–ß–ò–õ–ò –í–°–ï –ß–ò–¢–´! üéÆ\nüèÜ –í–´ - –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ú–ê–°–¢–ï–†! üèÜ');
            this.secretCodeInput = '';
            this.saveSecrets();
            
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            this.unlockAllAchievements();
        }
    }
    
    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É
     */
    unlockAllAchievements() {
        const allAchievements = [
            { id: 'score1000', title: '–ü–µ—Ä–≤–∞—è —Ç—ã—Å—è—á–∞', description: '–ù–∞–±—Ä–∞—Ç—å 1000 –æ—á–∫–æ–≤' },
            { id: 'score5000', title: '–ü—è—Ç—å —Ç—ã—Å—è—á!', description: '–ù–∞–±—Ä–∞—Ç—å 5000 –æ—á–∫–æ–≤' },
            { id: 'score10000', title: '–î–µ—Å—è—Ç—å —Ç—ã—Å—è—á!', description: '–ù–∞–±—Ä–∞—Ç—å 10000 –æ—á–∫–æ–≤' },
            { id: 'combo5', title: '–ö–æ–º–±–æ –º–∞—Å—Ç–µ—Ä', description: '–°–¥–µ–ª–∞—Ç—å –∫–æ–º–±–æ –∏–∑ 5 –ø—É–∑—ã—Ä–µ–π' },
            { id: 'combo10', title: '–ö–æ–º–±–æ –ª–µ–≥–µ–Ω–¥–∞', description: '–°–¥–µ–ª–∞—Ç—å –∫–æ–º–±–æ –∏–∑ 10 –ø—É–∑—ã—Ä–µ–π' },
            { id: 'combo20', title: '–ö–æ–º–±–æ –±–æ–≥', description: '–°–¥–µ–ª–∞—Ç—å –∫–æ–º–±–æ –∏–∑ 20 –ø—É–∑—ã—Ä–µ–π' },
            { id: 'level5', title: '–ü—è—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å', description: '–î–æ—Å—Ç–∏—á—å 5 —É—Ä–æ–≤–Ω—è' },
            { id: 'level10', title: '–î–µ—Å—è—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å', description: '–î–æ—Å—Ç–∏—á—å 10 —É—Ä–æ–≤–Ω—è' },
            { id: 'level20', title: '–î–≤–∞–¥—Ü–∞—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å', description: '–î–æ—Å—Ç–∏—á—å 20 —É—Ä–æ–≤–Ω—è' },
            { id: 'cheat_master', title: '–ú–∞—Å—Ç–µ—Ä —á–∏—Ç–æ–≤', description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —á–∏—Ç-–∫–æ–¥—ã' },
            { id: 'secret_finder', title: '–ò—Å–∫–∞—Ç–µ–ª—å —Å–µ–∫—Ä–µ—Ç–æ–≤', description: '–ù–∞–π—Ç–∏ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã' }
        ];
        
        allAchievements.forEach(achievement => {
            if (!this.hasAchievement(achievement.id)) {
                this.achievements.push({
                    ...achievement,
                    unlocked: Date.now()
                });
            }
        });
        
        this.stats.secretsFound = this.achievements.length;
        this.saveStats();
        this.saveSecrets();
    }
        
        // –ß–∏—Ç-–∫–æ–¥ "immortal" - –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∂–∏–∑–Ω–∏
        else if (this.secretCodeInput.endsWith('immortal')) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –±–µ—Å—Å–º–µ—Ä—Ç–∏—è
            this.isImmortal = true;
            this.lives = 999;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showSecretCodeNotification('–ß–ò–¢-–ö–û–î "IMMORTAL" –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!');
            this.secretCodeInput = '';
            this.saveSecrets();
            
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            this.unlockAchievement('immortal', '–ë–µ—Å—Å–º–µ—Ä—Ç–∏–µ', '–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–∂–∏–º –±–µ—Å—Å–º–µ—Ä—Ç–∏—è!');
        }
        
        // –ß–∏—Ç-–∫–æ–¥ "points" - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç 1000 –æ—á–∫–æ–≤
        else if (this.secretCodeInput.endsWith('points')) {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
            this.score += 1000;
            this.levelProgress += 1000;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            document.getElementById('score').textContent = this.score;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            this.checkLevelUp();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showSecretCodeNotification('–ß–ò–¢-–ö–û–î "POINTS" –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! +1000 –û–ß–ö–û–í');
            this.secretCodeInput = '';
        }
    }
    
    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    unlockAllAchievements() {
        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const allAchievements = [
            {id: 'score1000', title: '–ù–∞–±—Ä–∞—Ç—å 1000 –æ—á–∫–æ–≤', description: '–í—ã –Ω–∞–±—Ä–∞–ª–∏ 1000 –æ—á–∫–æ–≤!'},
            {id: 'score5000', title: '–ù–∞–±—Ä–∞—Ç—å 5000 –æ—á–∫–æ–≤', description: '–í—ã –Ω–∞–±—Ä–∞–ª–∏ 5000 –æ—á–∫–æ–≤!'},
            {id: 'combo5', title: '–ö–æ–º–±–æ x5', description: '–í—ã —Å–¥–µ–ª–∞–ª–∏ –∫–æ–º–±–æ –∏–∑ 5 –ø—É–∑—ã—Ä–µ–π!'},
            {id: 'combo10', title: '–ö–æ–º–±–æ x10', description: '–í—ã —Å–¥–µ–ª–∞–ª–∏ –∫–æ–º–±–æ –∏–∑ 10 –ø—É–∑—ã—Ä–µ–π!'},
            {id: 'level5', title: '–£—Ä–æ–≤–µ–Ω—å 5', description: '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 5 —É—Ä–æ–≤–Ω—è!'},
            {id: 'level10', title: '–£—Ä–æ–≤–µ–Ω—å 10', description: '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 10 —É—Ä–æ–≤–Ω—è!'},
            {id: 'godmode', title: '–†–µ–∂–∏–º –ë–æ–≥–∞', description: '–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–∂–∏–º –ë–æ–≥–∞!'}
        ];
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        for (const achievement of allAchievements) {
            if (!this.hasAchievement(achievement.id)) {
                this.achievements.push({
                    id: achievement.id,
                    title: achievement.title,
                    description: achievement.description,
                    unlocked: Date.now()
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                this.stats.secretsFound++;
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.saveStats();
        this.saveSecrets();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
        this.showAchievementNotification('–†–µ–∂–∏–º –ë–æ–≥–∞');
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞—Å—Ö–∞–ª–∫—É
     * @param {string} eggName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Å—Ö–∞–ª–∫–∏
     */
    activateEasterEgg(eggName) {
        if (this.easterEggs[eggName]) return; // –£–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
        
        this.easterEggs[eggName] = true;
        this.saveSecrets();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        let title = '';
        
        switch (eggName) {
            case 'rainbowMode':
                title = '–†–∞–¥—É–∂–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!';
                break;
            case 'giantBubbles':
                title = '–†–µ–∂–∏–º –≥–∏–≥–∞–Ω—Ç—Å–∫–∏—Ö –ø—É–∑—ã—Ä–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!';
                break;
            case 'antiGravity':
                title = '–ê–Ω—Ç–∏–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!';
                break;
            case 'superCombo':
                title = '–°—É–ø–µ—Ä-–∫–æ–º–±–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!';
                break;
        }
        
        this.showSecretCodeNotification(title);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Å—Ö–∞–ª–∫–∏
        this.applyEasterEggEffect(eggName);
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Å—Ö–∞–ª–∫–∏
     * @param {string} eggName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Å—Ö–∞–ª–∫–∏
     */
    applyEasterEggEffect(eggName) {
        switch (eggName) {
            case 'rainbowMode':
                // –î–µ–ª–∞–µ–º –≤—Å–µ –ø—É–∑—ã—Ä–∏ —Ä–∞–¥—É–∂–Ω—ã–º–∏
                for (const bubble of this.bubbles) {
                    bubble.isRainbow = true;
                }
                break;
                
            case 'giantBubbles':
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –ø—É–∑—ã—Ä–µ–π
                for (const bubble of this.bubbles) {
                    bubble.radius *= 1.5;
                }
                break;
                
            case 'antiGravity':
                // –ú–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
                for (const bubble of this.bubbles) {
                    bubble.gravity = -bubble.gravity;
                }
                break;
                
            case 'superCombo':
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–æ–º–±–æ
                this.comboCount = Math.max(this.comboCount, 5);
                this.comboTimer = this.maxComboTime * 3;
                break;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–≤–æ–¥–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    showSecretCodeNotification(message) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = 'secret-code-notification';
        notification.innerHTML = `
            <div class="secret-code-icon">üîÆ</div>
            <div class="secret-code-text">${message}</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const style = document.createElement('style');
        style.textContent = `
            .secret-code-notification {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(0, 0, 0, 0.9);
                color: white;
                padding: 20px;
                border-radius: 15px;
                display: flex;
                flex-direction: column;
                align-items: center;
                z-index: 1000;
                animation: secret-code-appear 0.5s, secret-code-disappear 0.5s 2.5s;
                box-shadow: 0 0 30px rgba(128, 0, 255, 0.7);
                border: 3px solid #8a2be2;
                text-align: center;
            }
            .secret-code-icon {
                font-size: 40px;
                margin-bottom: 15px;
            }
            .secret-code-text {
                font-size: 22px;
                font-weight: bold;
                color: #ff00ff;
            }
            @keyframes secret-code-appear {
                from { transform: translate(-50%, -50%) scale(0); opacity: 0; }
                to { transform: translate(-50%, -50%) scale(1); opacity: 1; }
            }
            @keyframes secret-code-disappear {
                from { transform: translate(-50%, -50%) scale(1); opacity: 1; }
                to { transform: translate(-50%, -50%) scale(1.5); opacity: 0; }
            }
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.head.appendChild(style);
        document.body.appendChild(notification);
        
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º –æ–∫–Ω–∞
     */
    resizeCanvas() {
        const container = this.canvas.parentElement;
        console.log('Resizing canvas...');
        console.log(`Container dimensions: width=${container.clientWidth}, height=${container.clientHeight}`);
        
        this.canvas.width = container.clientWidth;
        this.canvas.height = container.clientHeight - 60; // –í—ã—á–∏—Ç–∞–µ–º –≤—ã—Å–æ—Ç—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
        console.log(`New canvas dimensions: width=${this.canvas.width}, height=${this.canvas.height}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–≤–∞—Å –∏–º–µ–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if (this.canvas.width <= 0 || this.canvas.height <= 0) {
            console.error('Canvas has invalid dimensions!');
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            this.canvas.width = Math.max(300, this.canvas.width);
            this.canvas.height = Math.max(400, this.canvas.height);
            console.log(`Corrected canvas dimensions: width=${this.canvas.width}, height=${this.canvas.height}`);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –Ω–∞–¥ –∫–∞–Ω–≤–∞—Å–æ–º
     * @param {MouseEvent|TouchEvent} e - –°–æ–±—ã—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
     */
    handleMouseMove(e) {
        if (this.isPaused || this.isGameOver) return;
        
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ –∫–∞–∫–∏–º-–ª–∏–±–æ –ø—É–∑—ã—Ä–µ–º
        let hoveredBubble = false;
        
        for (let i = 0; i < this.bubbles.length; i++) {
            const bubble = this.bubbles[i];
            
            // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ –ø—É–∑—ã—Ä–µ–º, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            if (bubble.containsPoint(x, y)) {
                bubble.isHovered = true;
                hoveredBubble = true;
                this.canvas.style.cursor = 'pointer'; // –ú–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ —É–∫–∞–∑–∞—Ç–µ–ª—å
            } else {
                bubble.isHovered = false;
            }
        }
        
        // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–µ –Ω–∞–¥ –ø—É–∑—ã—Ä–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É—Ä—Å–æ—Ä
        if (!hoveredBubble) {
            this.canvas.style.cursor = 'default';
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞–Ω–≤–∞—Å
     * @param {MouseEvent|TouchEvent} e - –°–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è
     */
    handleClick(e) {
        if (this.isPaused || this.isGameOver) return;

        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        let bubblePopped = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—É–∑—ã—Ä—å –Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç—å—é –∫–ª–∏–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
        for (let i = this.bubbles.length - 1; i >= 0; i--) {
            const bubble = this.bubbles[i];
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–ª–∏–∫–∞ –Ω–∞ 10 –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
            if (bubble.containsPoint(x, y, 10) && bubble.pop()) {
                bubblePopped = true;
                this.stats.totalBubbles++;
                
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—É–∑—ã—Ä—è
                if (bubble.type === 'special') {
                    this.audio.playSound('special');
                } else {
                    this.audio.playSound('pop');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ
                this.comboCount++;
                this.comboTimer = this.maxComboTime;
                
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–æ–º–±–æ, –µ—Å–ª–∏ –∫–æ–º–±–æ –±–æ–ª—å—à–µ 3
                if (this.comboCount >= 3) {
                    this.audio.playSound('combo');
                }
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–±–æ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è
                let pointsToAdd = bubble.points * (1 + (this.comboCount - 1) * 0.1) * this.pointsMultiplier;
                this.score += Math.round(pointsToAdd);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è
                this.levelProgress += Math.round(pointsToAdd);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                this.checkLevelUp();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                this.checkAchievements();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                document.getElementById('score').textContent = this.score;
                document.getElementById('progress-bar').style.width = `${(this.levelProgress / this.levelTarget) * 100}%`;
                
                break; // –õ–æ–ø–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—É–∑—ã—Ä—å –∑–∞ –∫–ª–∏–∫
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –ø–æ –ø—É–∑—ã—Ä—é, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ
        if (!bubblePopped) {
            this.comboCount = 0;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
     */
    checkLevelUp() {
        if (this.levelProgress >= this.levelTarget) {
            this.levelUp();
        }
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
     */
    levelUp() {
        this.level++;
        this.levelProgress = 0;
        this.levelTarget = Math.round(this.levelTarget * 1.5); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        this.bubbleSpawnRate = Math.max(200, this.bubbleSpawnRate * 0.9); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—É–∑—ã—Ä–µ–π
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        this.audio.playSound('levelUp');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        document.getElementById('level').textContent = this.level;
        document.getElementById('progress-bar').style.width = '0%';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (this.level > this.stats.maxLevel) {
            this.stats.maxLevel = this.level;
            this.saveStats();
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        this.createLevelUpEffect();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
     */
    createLevelUpEffect() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–ø—ã—à–∫—É —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ "Level Up!"
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É
     */
    start() {
        console.log('Game.start() called');
        this.isGameOver = false;
        this.isPaused = false;
        this.score = 0;
        this.level = 1;
        this.lives = 3;
        this.bubbles = [];
        this.comboCount = 0;
        this.comboTimer = 0;
        this.levelProgress = 0;
        this.levelTarget = 500;
        this.bubbleSpawnRate = 1000;
        this.timeScale = 1;
        this.pointsMultiplier = 1;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        clearTimeout(this.effectTimers.slowTime);
        clearTimeout(this.effectTimers.doublePoints);
        this.isSlowTime = false;
        this.isDoublePoints = false;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–∑—ã—Ä–µ–π —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
        console.log('Creating initial bubbles...');
        for (let i = 0; i < 10; i++) {
            this.spawnBubble();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
        this.audio.playMusic();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        document.getElementById('score').textContent = '0';
        document.getElementById('level').textContent = '1';
        document.getElementById('progress-bar').style.width = '0%';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.totalGames++;
        this.saveStats();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        console.log('Starting game loop...');
        this.lastFrameTime = performance.now();
        requestAnimationFrame((timestamp) => this.gameLoop(timestamp));
    }

    /**
     * –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–≥—Ä—É
     */
    togglePause() {
        this.isPaused = !this.isPaused;
        if (!this.isPaused) {
            this.lastFrameTime = performance.now();
            requestAnimationFrame((timestamp) => this.gameLoop(timestamp));
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É
     */
    gameOver() {
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –±–µ—Å—Å–º–µ—Ä—Ç–∏—è, –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        if (this.isImmortal) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–∏–∑–Ω–∏
            this.lives = 999;
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showSecretCodeNotification('–ë–ï–°–°–ú–ï–†–¢–ò–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û!');
            return;
        }
        
        this.isGameOver = true;
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.audio.playSound('gameOver');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
        this.audio.stopMusic();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (this.score > this.stats.bestScore) {
            this.stats.bestScore = this.score;
            this.saveStats();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        document.getElementById('game-screen').classList.add('hidden');
        document.getElementById('game-over-screen').classList.remove('hidden');
        document.getElementById('final-score').textContent = this.score;
    }

    /**
     * –ó–∞–º–µ–¥–ª—è–µ—Ç –≤—Ä–µ–º—è –≤ –∏–≥—Ä–µ
     * @param {number} duration - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    slowTime(duration) {
        this.isSlowTime = true;
        this.timeScale = 0.5;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        clearTimeout(this.effectTimers.slowTime);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        this.effectTimers.slowTime = setTimeout(() => {
            this.isSlowTime = false;
            this.timeScale = 1;
        }, duration);
    }

    /**
     * –£–¥–≤–∞–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–µ –æ—á–∫–∏
     * @param {number} duration - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    doublePoints(duration) {
        this.isDoublePoints = true;
        this.pointsMultiplier = 2;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        clearTimeout(this.effectTimers.doublePoints);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        this.effectTimers.doublePoints = setTimeout(() => {
            this.isDoublePoints = false;
            this.pointsMultiplier = 1;
        }, duration);
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å
     */
    addLife() {
        this.lives++;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—É–∑—ã—Ä—å
     */
    spawnBubble() {
        console.log('Spawning bubble...');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–¥–∏—É—Å –ø—É–∑—ã—Ä—è —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –≥–∏–≥–∞–Ω—Ç—Å–∫–∏—Ö –ø—É–∑—ã—Ä–µ–π
        let radius = Math.random() * 20 + 20; // –†–∞–¥–∏—É—Å –æ—Ç 20 –¥–æ 40
        if (this.easterEggs.giantBubbles) {
            radius *= 1.5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ –≥–∏–≥–∞–Ω—Ç—Å–∫–∏—Ö –ø—É–∑—ã—Ä–µ–π
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—É–∑—ã—Ä—å –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞, –Ω–æ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        const x = Math.random() * (this.canvas.width - radius * 2) + radius;
        const y = this.canvas.height - radius; // –ü—É–∑—ã—Ä—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, –Ω–æ –≤–∏–¥–µ–Ω
        
        console.log(`Bubble position: x=${x}, y=${y}, radius=${radius}`);
        console.log(`Canvas dimensions: width=${this.canvas.width}, height=${this.canvas.height}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—É–∑—ã—Ä—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        let type = 'normal';
        const rand = Math.random();
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—É–∑—ã—Ä–µ–π, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—à–µ–ª —Å–µ–∫—Ä–µ—Ç—ã
        const specialBonus = this.stats.secretsFound * 0.01; // +1% –∑–∞ –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
        
        if (rand < (0.05 + specialBonus)) {
            type = 'special';
        } else if (rand < (0.15 + specialBonus)) {
            type = 'rare';
        } else if (rand < 0.25) {
            type = 'obstacle';
        }
        
        console.log(`Bubble type: ${type}`);
        
        const bubble = new Bubble(x, y, radius, type, this);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—É–∑—ã—Ä—è —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –∞–Ω—Ç–∏–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
        const baseSpeed = Math.random() * 2 + 1;
        bubble.velocityY = this.easterEggs.antiGravity ? baseSpeed : -baseSpeed;
        
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–¥—É–∂–Ω—ã–π —Ä–µ–∂–∏–º, –¥–µ–ª–∞–µ–º –ø—É–∑—ã—Ä—å —Ä–∞–¥—É–∂–Ω—ã–º
        if (this.easterEggs.rainbowMode) {
            bubble.isRainbow = true;
        }
        
        // –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        if (this.level >= 5) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø—É–∑—ã—Ä–µ–π —Å –∫–∞–∂–¥—ã–º —É—Ä–æ–≤–Ω–µ–º
            bubble.velocityY *= (1 + (this.level - 5) * 0.05);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –ø—É–∑—ã—Ä–µ–π
            bubble.rotationSpeed = (Math.random() - 0.5) * 0.1;
        }
        
        this.bubbles.push(bubble);
        console.log(`Total bubbles: ${this.bubbles.length}`);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
     * @param {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
     */
    gameLoop(timestamp) {
        if (this.isGameOver || this.isPaused) {
            console.log('Game is over or paused, not running game loop');
            return;
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—É –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
        const deltaTime = (timestamp - this.lastFrameTime) * this.timeScale;
        this.lastFrameTime = timestamp;
        
        console.log(`Game loop running, deltaTime: ${deltaTime}ms`);
        
        // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—É–∑—ã—Ä–µ–π
        this.bubbleSpawnTimer += deltaTime;
        console.log(`Bubble spawn timer: ${this.bubbleSpawnTimer}ms, spawn rate: ${this.bubbleSpawnRate}ms`);
        
        if (this.bubbleSpawnTimer >= this.bubbleSpawnRate) {
            this.spawnBubble();
            this.bubbleSpawnTimer = 0;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–º–±–æ
        if (this.comboTimer > 0) {
            this.comboTimer -= deltaTime;
            if (this.comboTimer <= 0) {
                this.comboCount = 0;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—É–∑—ã—Ä–∏
        console.log(`Updating and drawing ${this.bubbles.length} bubbles`);
        
        for (let i = this.bubbles.length - 1; i >= 0; i--) {
            const bubble = this.bubbles[i];
            bubble.update();
            bubble.draw(this.ctx);
            
            // –£–¥–∞–ª—è–µ–º –ª–æ–ø–Ω—É–≤—à–∏–µ –ø—É–∑—ã—Ä–∏
            if (bubble.popped) {
                this.bubbles.splice(i, 1);
                console.log('Removed popped bubble');
            }
            // –£–¥–∞–ª—è–µ–º –ø—É–∑—ã—Ä–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞ —Å–≤–µ—Ä—Ö—É
            else if (bubble.y + bubble.radius < -100) {
                this.bubbles.splice(i, 1);
                console.log('Removed bubble that went off screen at top');
                
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª –ø—É–∑—ã—Ä—å-–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ, —Ç–µ—Ä—è–µ–º –∂–∏–∑–Ω—å (–µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–∏—Ç –±–µ—Å—Å–º–µ—Ä—Ç–∏—è)
                if (bubble.type !== 'obstacle') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∏—Ç –±–µ—Å—Å–º–µ—Ä—Ç–∏—è
                    if (!this.easterEggs.immortal && !this.easterEggs.godMode && !this.secretCodes.life) {
                        this.lives--;
                        console.log(`Lost a life, lives remaining: ${this.lives}`);
                    } else {
                        console.log('Immortality cheat active - no life lost!');
                    }
                    
                    if (this.lives <= 0) {
                        this.gameOver();
                        return;
                    }
                }
            }
        }
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.drawEffects();
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        requestAnimationFrame((timestamp) => this.gameLoop(timestamp));
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
     */
    drawEffects() {
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        if (this.isSlowTime) {
            this.ctx.fillStyle = 'rgba(0, 100, 255, 0.2)';
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        }
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–¥–≤–æ–µ–Ω–∏—è –æ—á–∫–æ–≤
        if (this.isDoublePoints) {
            this.ctx.fillStyle = 'rgba(255, 215, 0, 0.2)';
            this.ctx.fillRect(0, 0, this.canvas.width, 5);
        }
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–º–±–æ
        if (this.comboCount > 1) {
            this.ctx.font = '24px Arial';
            this.ctx.fillStyle = 'rgba(255, 100, 100, 0.8)';
            this.ctx.textAlign = 'center';
            this.ctx.fillText(`–ö–æ–º–±–æ x${this.comboCount}`, this.canvas.width / 2, 30);
        }
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π
        this.ctx.font = '20px Arial';
        this.ctx.fillStyle = 'rgba(255, 50, 50, 0.8)';
        this.ctx.textAlign = 'left';
        this.ctx.fillText(`‚ù§Ô∏è ${this.lives}`, 10, 30);
    }
}